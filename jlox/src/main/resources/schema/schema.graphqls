type Query {
  tokens(code: String!): [Token!]!
  run(code: String!) : String! # added during part 2

}

enum TokenType {
  LEFT_PAREN
  RIGHT_PAREN
  LEFT_BRACE
  RIGHT_BRACE,
  COMMA
  DOT
  MINUS
  PLUS
  SEMICOLON
  SLASH
  STAR
  BANG
  BANG_EQUAL
  EQUAL
  EQUAL_EQUAL
  GREATER
  GREATER_EQUAL
  LESS
  LESS_EQUAL
  IDENTIFIER
  STRING
  NUMBER
  AND
  CLASS
  ELSE
  FALSE
  FUN
  FOR
  IF
  INCLUDE
  INPUT
  NIL
  OR
  PRINT
  RETURN
  SUPER
  THIS
  TRUE
  VAR
  WHILE
  EOF

}

type Token {
  type : TokenType!
  lexeme : String!
  literal : LiteralValue!
  line : Int!
}

### Literal Types
union LiteralValue = LiteralString | LiteralFloat | LiteralBoolean | LiteralNull | Function

type LiteralBoolean {
  value : Boolean!
}
type LiteralFloat {
  value : Float!
}
type LiteralNull {
  value : Boolean!
}
type LiteralString {
  value : String!
}

### Interface Expr Types

interface Expr {
  id : Int!
}
type Assign implements Expr {
  id : Int!
  name : Token!
  value : Expr!
}
type Binary implements Expr {
  id : Int!
  left : Expr!
  operator : Token!
  right : Expr!
}
type Call implements Expr {
  id : Int!
  callee : Expr!
  paren : Token!
  arguments : [Expr!]! # two exclamation marks makes this a required argument
}
type Get implements Expr {
  id : Int!
  object : Expr!
  name : Token!
}
type Grouping implements Expr {
  id : Int!
  expression : Expr!
}
type Literal implements Expr {
  id : Int!
  value : LiteralValue! # LiteralValue instead of Object
}
type Logical implements Expr {
  id : Int!
  left : Expr!
  operator : Token!
  right : Expr!
}
type Set implements Expr {
  id : Int!
  object : Expr!
  name : Token!
  value : Expr!
}
type Super implements Expr { # the super expression itself contains only the token for the super keyword and the name of the method being looked up
  id : Int!
  keyword : Token!
  method : Token!
}
type This implements Expr {
  id : Int!
  keyword : Token!
}
type Unary implements Expr {
  id : Int!
  operator : Token!
  right : Expr!
}
type Variable implements Expr {
  id : Int!
  name : Token!
}

#### Interface Stmt Types

interface Stmt {
  id : Int! 
}
type Block implements Stmt {
  id : Int!
  statements : [Stmt!]
}
type Class implements Stmt {
  id : Int!
  name : Token!
  superclass : Variable!
  methods : [Function!]
}
type Expression implements Stmt {
  id : Int!
  expression : Expr!
}
type For implements Stmt {
  id : Int!
  condition : Expr!
  
}
type Function implements Stmt {
  id : Int!
  name : Token!
  params : [Token!]
  body : [Stmt!]
}
type If implements Stmt {
  id : Int!
  condition : Expr!
  thenBranch : Stmt!
  elseBranch : Stmt!
}
type Print implements Stmt {
  id : Int!
  expression : Expr!
}
type Return implements Stmt {
  id : Int!
  keyword : Token!
  value : Expr!
}
type Var implements Stmt {
  id : Int!
  name : Token!
  initializer : Expr!
}
type While implements Stmt {
  id : Int!
  condition : Expr!
  body : Stmt!
}