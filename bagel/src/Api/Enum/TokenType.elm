-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.TokenType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type TokenType
    = LeftParen
    | RightParen
    | LeftBrace
    | RightBrace
    | Comma
    | Dot
    | Minus
    | Plus
    | Semicolon
    | Slash
    | Star
    | Bang
    | BangEqual
    | Equal
    | EqualEqual
    | Greater
    | GreaterEqual
    | Less
    | LessEqual
    | Identifier
    | String
    | Number
    | And
    | Class
    | Else
    | False
    | Fun
    | For
    | If
    | Include
    | Input
    | Nil
    | Or
    | Print
    | Proto
    | Return
    | Super
    | This
    | True
    | Var
    | While
    | Eof


list : List TokenType
list =
    [ LeftParen, RightParen, LeftBrace, RightBrace, Comma, Dot, Minus, Plus, Semicolon, Slash, Star, Bang, BangEqual, Equal, EqualEqual, Greater, GreaterEqual, Less, LessEqual, Identifier, String, Number, And, Class, Else, False, Fun, For, If, Include, Input, Nil, Or, Print, Proto, Return, Super, This, True, Var, While, Eof ]


decoder : Decoder TokenType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "LEFT_PAREN" ->
                        Decode.succeed LeftParen

                    "RIGHT_PAREN" ->
                        Decode.succeed RightParen

                    "LEFT_BRACE" ->
                        Decode.succeed LeftBrace

                    "RIGHT_BRACE" ->
                        Decode.succeed RightBrace

                    "COMMA" ->
                        Decode.succeed Comma

                    "DOT" ->
                        Decode.succeed Dot

                    "MINUS" ->
                        Decode.succeed Minus

                    "PLUS" ->
                        Decode.succeed Plus

                    "SEMICOLON" ->
                        Decode.succeed Semicolon

                    "SLASH" ->
                        Decode.succeed Slash

                    "STAR" ->
                        Decode.succeed Star

                    "BANG" ->
                        Decode.succeed Bang

                    "BANG_EQUAL" ->
                        Decode.succeed BangEqual

                    "EQUAL" ->
                        Decode.succeed Equal

                    "EQUAL_EQUAL" ->
                        Decode.succeed EqualEqual

                    "GREATER" ->
                        Decode.succeed Greater

                    "GREATER_EQUAL" ->
                        Decode.succeed GreaterEqual

                    "LESS" ->
                        Decode.succeed Less

                    "LESS_EQUAL" ->
                        Decode.succeed LessEqual

                    "IDENTIFIER" ->
                        Decode.succeed Identifier

                    "STRING" ->
                        Decode.succeed String

                    "NUMBER" ->
                        Decode.succeed Number

                    "AND" ->
                        Decode.succeed And

                    "CLASS" ->
                        Decode.succeed Class

                    "ELSE" ->
                        Decode.succeed Else

                    "FALSE" ->
                        Decode.succeed False

                    "FUN" ->
                        Decode.succeed Fun

                    "FOR" ->
                        Decode.succeed For

                    "IF" ->
                        Decode.succeed If

                    "INCLUDE" ->
                        Decode.succeed Include

                    "INPUT" ->
                        Decode.succeed Input

                    "NIL" ->
                        Decode.succeed Nil

                    "OR" ->
                        Decode.succeed Or

                    "PRINT" ->
                        Decode.succeed Print

                    "PROTO" ->
                        Decode.succeed Proto

                    "RETURN" ->
                        Decode.succeed Return

                    "SUPER" ->
                        Decode.succeed Super

                    "THIS" ->
                        Decode.succeed This

                    "TRUE" ->
                        Decode.succeed True

                    "VAR" ->
                        Decode.succeed Var

                    "WHILE" ->
                        Decode.succeed While

                    "EOF" ->
                        Decode.succeed Eof

                    _ ->
                        Decode.fail ("Invalid TokenType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TokenType -> String
toString enum____ =
    case enum____ of
        LeftParen ->
            "LEFT_PAREN"

        RightParen ->
            "RIGHT_PAREN"

        LeftBrace ->
            "LEFT_BRACE"

        RightBrace ->
            "RIGHT_BRACE"

        Comma ->
            "COMMA"

        Dot ->
            "DOT"

        Minus ->
            "MINUS"

        Plus ->
            "PLUS"

        Semicolon ->
            "SEMICOLON"

        Slash ->
            "SLASH"

        Star ->
            "STAR"

        Bang ->
            "BANG"

        BangEqual ->
            "BANG_EQUAL"

        Equal ->
            "EQUAL"

        EqualEqual ->
            "EQUAL_EQUAL"

        Greater ->
            "GREATER"

        GreaterEqual ->
            "GREATER_EQUAL"

        Less ->
            "LESS"

        LessEqual ->
            "LESS_EQUAL"

        Identifier ->
            "IDENTIFIER"

        String ->
            "STRING"

        Number ->
            "NUMBER"

        And ->
            "AND"

        Class ->
            "CLASS"

        Else ->
            "ELSE"

        False ->
            "FALSE"

        Fun ->
            "FUN"

        For ->
            "FOR"

        If ->
            "IF"

        Include ->
            "INCLUDE"

        Input ->
            "INPUT"

        Nil ->
            "NIL"

        Or ->
            "OR"

        Print ->
            "PRINT"

        Proto ->
            "PROTO"

        Return ->
            "RETURN"

        Super ->
            "SUPER"

        This ->
            "THIS"

        True ->
            "TRUE"

        Var ->
            "VAR"

        While ->
            "WHILE"

        Eof ->
            "EOF"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TokenType
fromString enumString____ =
    case enumString____ of
        "LEFT_PAREN" ->
            Just LeftParen

        "RIGHT_PAREN" ->
            Just RightParen

        "LEFT_BRACE" ->
            Just LeftBrace

        "RIGHT_BRACE" ->
            Just RightBrace

        "COMMA" ->
            Just Comma

        "DOT" ->
            Just Dot

        "MINUS" ->
            Just Minus

        "PLUS" ->
            Just Plus

        "SEMICOLON" ->
            Just Semicolon

        "SLASH" ->
            Just Slash

        "STAR" ->
            Just Star

        "BANG" ->
            Just Bang

        "BANG_EQUAL" ->
            Just BangEqual

        "EQUAL" ->
            Just Equal

        "EQUAL_EQUAL" ->
            Just EqualEqual

        "GREATER" ->
            Just Greater

        "GREATER_EQUAL" ->
            Just GreaterEqual

        "LESS" ->
            Just Less

        "LESS_EQUAL" ->
            Just LessEqual

        "IDENTIFIER" ->
            Just Identifier

        "STRING" ->
            Just String

        "NUMBER" ->
            Just Number

        "AND" ->
            Just And

        "CLASS" ->
            Just Class

        "ELSE" ->
            Just Else

        "FALSE" ->
            Just False

        "FUN" ->
            Just Fun

        "FOR" ->
            Just For

        "IF" ->
            Just If

        "INCLUDE" ->
            Just Include

        "INPUT" ->
            Just Input

        "NIL" ->
            Just Nil

        "OR" ->
            Just Or

        "PRINT" ->
            Just Print

        "PROTO" ->
            Just Proto

        "RETURN" ->
            Just Return

        "SUPER" ->
            Just Super

        "THIS" ->
            Just This

        "TRUE" ->
            Just True

        "VAR" ->
            Just Var

        "WHILE" ->
            Just While

        "EOF" ->
            Just Eof

        _ ->
            Nothing
